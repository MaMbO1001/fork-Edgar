// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/twitter/v1/twitter.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TwitByAuthorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TwitByAuthorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TwitByAuthorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TwitByAuthorRequestMultiError, or nil if none found.
func (m *TwitByAuthorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TwitByAuthorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorId

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return TwitByAuthorRequestMultiError(errors)
	}

	return nil
}

// TwitByAuthorRequestMultiError is an error wrapping multiple validation
// errors returned by TwitByAuthorRequest.ValidateAll() if the designated
// constraints aren't met.
type TwitByAuthorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TwitByAuthorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TwitByAuthorRequestMultiError) AllErrors() []error { return m }

// TwitByAuthorRequestValidationError is the validation error returned by
// TwitByAuthorRequest.Validate if the designated constraints aren't met.
type TwitByAuthorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TwitByAuthorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TwitByAuthorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TwitByAuthorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TwitByAuthorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TwitByAuthorRequestValidationError) ErrorName() string {
	return "TwitByAuthorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TwitByAuthorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTwitByAuthorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TwitByAuthorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TwitByAuthorRequestValidationError{}

// Validate checks the field values on TwitByAuthorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TwitByAuthorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TwitByAuthorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TwitByAuthorResponseMultiError, or nil if none found.
func (m *TwitByAuthorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TwitByAuthorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTwits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TwitByAuthorResponseValidationError{
						field:  fmt.Sprintf("Twits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TwitByAuthorResponseValidationError{
						field:  fmt.Sprintf("Twits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TwitByAuthorResponseValidationError{
					field:  fmt.Sprintf("Twits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return TwitByAuthorResponseMultiError(errors)
	}

	return nil
}

// TwitByAuthorResponseMultiError is an error wrapping multiple validation
// errors returned by TwitByAuthorResponse.ValidateAll() if the designated
// constraints aren't met.
type TwitByAuthorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TwitByAuthorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TwitByAuthorResponseMultiError) AllErrors() []error { return m }

// TwitByAuthorResponseValidationError is the validation error returned by
// TwitByAuthorResponse.Validate if the designated constraints aren't met.
type TwitByAuthorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TwitByAuthorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TwitByAuthorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TwitByAuthorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TwitByAuthorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TwitByAuthorResponseValidationError) ErrorName() string {
	return "TwitByAuthorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TwitByAuthorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTwitByAuthorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TwitByAuthorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TwitByAuthorResponseValidationError{}

// Validate checks the field values on Twit with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Twit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Twit with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TwitMultiError, or nil if none found.
func (m *Twit) ValidateAll() error {
	return m.validate(true)
}

func (m *Twit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorId

	// no validation rules for Id

	// no validation rules for Text

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TwitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TwitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TwitValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TwitValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TwitValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TwitValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	if len(errors) > 0 {
		return TwitMultiError(errors)
	}

	return nil
}

// TwitMultiError is an error wrapping multiple validation errors returned by
// Twit.ValidateAll() if the designated constraints aren't met.
type TwitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TwitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TwitMultiError) AllErrors() []error { return m }

// TwitValidationError is the validation error returned by Twit.Validate if the
// designated constraints aren't met.
type TwitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TwitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TwitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TwitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TwitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TwitValidationError) ErrorName() string { return "TwitValidationError" }

// Error satisfies the builtin error interface
func (e TwitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTwit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TwitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TwitValidationError{}

// Validate checks the field values on UpdateTwitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTwitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTwitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTwitRequestMultiError, or nil if none found.
func (m *UpdateTwitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTwitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Twit

	if len(errors) > 0 {
		return UpdateTwitRequestMultiError(errors)
	}

	return nil
}

// UpdateTwitRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTwitRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTwitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTwitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTwitRequestMultiError) AllErrors() []error { return m }

// UpdateTwitRequestValidationError is the validation error returned by
// UpdateTwitRequest.Validate if the designated constraints aren't met.
type UpdateTwitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTwitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTwitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTwitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTwitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTwitRequestValidationError) ErrorName() string {
	return "UpdateTwitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTwitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTwitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTwitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTwitRequestValidationError{}

// Validate checks the field values on UpdateTwitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTwitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTwitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTwitResponseMultiError, or nil if none found.
func (m *UpdateTwitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTwitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTwit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTwitResponseValidationError{
					field:  "Twit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTwitResponseValidationError{
					field:  "Twit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTwit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTwitResponseValidationError{
				field:  "Twit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTwitResponseMultiError(errors)
	}

	return nil
}

// UpdateTwitResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateTwitResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateTwitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTwitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTwitResponseMultiError) AllErrors() []error { return m }

// UpdateTwitResponseValidationError is the validation error returned by
// UpdateTwitResponse.Validate if the designated constraints aren't met.
type UpdateTwitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTwitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTwitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTwitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTwitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTwitResponseValidationError) ErrorName() string {
	return "UpdateTwitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTwitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTwitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTwitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTwitResponseValidationError{}

// Validate checks the field values on DeleteTwitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTwitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTwitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTwitRequestMultiError, or nil if none found.
func (m *DeleteTwitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTwitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTwitRequestMultiError(errors)
	}

	return nil
}

// DeleteTwitRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTwitRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTwitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTwitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTwitRequestMultiError) AllErrors() []error { return m }

// DeleteTwitRequestValidationError is the validation error returned by
// DeleteTwitRequest.Validate if the designated constraints aren't met.
type DeleteTwitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTwitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTwitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTwitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTwitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTwitRequestValidationError) ErrorName() string {
	return "DeleteTwitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTwitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTwitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTwitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTwitRequestValidationError{}

// Validate checks the field values on DeleteTwitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTwitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTwitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTwitResponseMultiError, or nil if none found.
func (m *DeleteTwitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTwitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTwitResponseMultiError(errors)
	}

	return nil
}

// DeleteTwitResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteTwitResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteTwitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTwitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTwitResponseMultiError) AllErrors() []error { return m }

// DeleteTwitResponseValidationError is the validation error returned by
// DeleteTwitResponse.Validate if the designated constraints aren't met.
type DeleteTwitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTwitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTwitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTwitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTwitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTwitResponseValidationError) ErrorName() string {
	return "DeleteTwitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTwitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTwitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTwitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTwitResponseValidationError{}

// Validate checks the field values on CreateTwitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTwitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTwitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTwitRequestMultiError, or nil if none found.
func (m *CreateTwitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTwitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Twit

	if len(errors) > 0 {
		return CreateTwitRequestMultiError(errors)
	}

	return nil
}

// CreateTwitRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTwitRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTwitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTwitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTwitRequestMultiError) AllErrors() []error { return m }

// CreateTwitRequestValidationError is the validation error returned by
// CreateTwitRequest.Validate if the designated constraints aren't met.
type CreateTwitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTwitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTwitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTwitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTwitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTwitRequestValidationError) ErrorName() string {
	return "CreateTwitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTwitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTwitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTwitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTwitRequestValidationError{}

// Validate checks the field values on CreateTwitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTwitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTwitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTwitResponseMultiError, or nil if none found.
func (m *CreateTwitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTwitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTwitResponseMultiError(errors)
	}

	return nil
}

// CreateTwitResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTwitResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTwitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTwitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTwitResponseMultiError) AllErrors() []error { return m }

// CreateTwitResponseValidationError is the validation error returned by
// CreateTwitResponse.Validate if the designated constraints aren't met.
type CreateTwitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTwitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTwitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTwitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTwitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTwitResponseValidationError) ErrorName() string {
	return "CreateTwitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTwitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTwitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTwitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTwitResponseValidationError{}
