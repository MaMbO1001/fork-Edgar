syntax = "proto3";

option go_package = "blablablashka/api/v1";

package twit;
import "google/rpc/code.proto";
import "buf/validate/validate.proto";

message TwitByAuthorRequest {
  string author_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message TwitByAuthorResponse {
  repeated Twit twits = 1;
  int32 total = 2;
}

message  Twit {
  string  author_id = 1 [(buf.validate.field).string = {uuid: true}];


  string id = 2 [(buf.validate.field).string = {uuid: true}];
  string text = 3 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 500
  }];
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  int32 total = 6;
}

message  UpdateTwitRequest {
  string id = 1;
 string Twit = 2 [(buf.validate.field).string = {
   min_len: 1,
   max_len: 500
 }];
}

message  UpdateTwitResponse {
  Twit twit = 1;
}

message DeleteTwitRequest{
   string id = 1;
}

message DeleteTwitResponse {}

message CreateTwitRequest {
  string twit = 1 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 500
  }];
}

message CreateTwitResponse {
  string id = 1 [(buf.validate.field).string = {uuid: true}];
}

service Start {
  rpc TwitByAuthors(TwitByAuthorRequest) returns (TwitByAuthorResponse) {
    option (google.api.http) = {get: "twit/api/v1/author"};
    option (api.annotations.v1.method_rule) = {
      codes: [
        INVALID_ARGUMENT,
        NOT_FOUND
      ]
    };
  }

  rpc UpdateTwit(UpdateTwitRequest) returns (UpdateTwitResponse) {
    option (google.api.http) = {
      put:"twit/api/v1/twit",
      body: "*"
    };
    option (api.annotations.v1.method_rule) = {
      codes: [
        INVALID_ARGUMENT,
        NOT_FOUND
      ]
    };
  }

  rpc DeleteTwit(DeleteTwitRequest) returns (DeleteTwitResponse) {
    option (google.api.http) = {delete: "twit/api/v1/delete"};
    option (api.annotations.v1.method_rule) = {
      codes: [
        INVALID_ARGUMENT,
        NOT_FOUND
      ]
    };
  }

  rpc CreateTwit(CreateTwitRequest) returns (CreateTwitResponse) {
    option (google.api.http) = {
      post: "/twit/api/v1/twit",
      body: "*"
    };
    option (api.annotations.v1.method_rule) = {
      codes: [
        INVALID_ARGUMENT
      ]
    };
  }
}